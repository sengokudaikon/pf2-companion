openapi: "3.0.3"
info:
  title: "pf2_companion_backend API"
  description: "pf2_companion_backend API"
  version: "1.0.0"
servers:
  - url: "http://localhost:8081"
  - url: "https://pf2-companion.up.railway.app"
paths:
  /metrics-http:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MetricSnapshot"
  /metrics-micrometer:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /api/ancestry/{id}:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_Model"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: "string"
  /api/ancestry/list/{page}/{size}:
    get:
      description: ""
      parameters:
      - name: "page"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "size"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Response"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: "string"
  /api/ancestry/name/{name}:
    get:
      description: ""
      parameters:
      - name: "name"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response_Model"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: "string"
  /api/auth/doesEmailExist:
    get:
      description: ""
      parameters:
      - name: "email"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
    options:
      description: ""
      parameters:
      - name: "email"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "object"
  /api/auth/doesUserExist:
    get:
      description: ""
      parameters:
      - name: "identifier"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
    options:
      description: ""
      parameters:
      - name: "identifier"
        in: "query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "object"
  /api/auth/register:
    post:
      description: ""
      parameters:
      - name: "email"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "username"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "uid"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "role"
        in: "query"
        required: false
        schema:
          type: "object"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Create"
        required: true
      responses:
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            application/json:
              schema: {}
  /api/health:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Healthy"
  /api/search:
    post:
      description: ""
      parameters:
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "type"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "rarity"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "traits"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "numbers"
        in: "query"
        required: false
        schema:
          type: "object"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchQuery"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/SearchResult"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: "string"
components:
  schemas:
    MetricSnapshot:
      type: "object"
      properties:
        name:
          type: "string"
        value:
          type: "number"
          format: "double"
      required:
      - "name"
    Model:
      type: "object"
      properties: {}
    Response:
      type: "object"
      properties: {}
    Response_Model: {}
    Create:
      type: "object"
      properties:
        email:
          type: "string"
        username:
          type: "string"
        uid:
          type: "string"
        role:
          type: "string"
          enum:
          - "USER"
          - "GAMEMASTER"
          - "ADMIN"
          - "OWNER"
      required:
      - "email"
      - "username"
      - "uid"
      - "role"
    StackTraceElement:
      type: "object"
      properties:
        classLoaderName:
          type: "string"
        moduleName:
          type: "string"
        moduleVersion:
          type: "string"
        methodName:
          type: "string"
        fileName:
          type: "string"
        lineNumber:
          type: "integer"
          format: "int32"
    Throwable:
      type: "object"
      properties:
        cause:
          $ref: "#/components/schemas/Throwable"
        stackTrace:
          type: "array"
          items:
            $ref: "#/components/schemas/StackTraceElement"
    Invalid:
      type: "object"
      properties:
        cause:
          $ref: "#/components/schemas/Throwable"
        stackTrace:
          type: "array"
          items:
            $ref: "#/components/schemas/StackTraceElement"
    Map:
      type: "object"
      properties: {}
    Map_String:
      type: "string"
    NumericFilter:
      type: "object"
      properties:
        type:
          type: "string"
        value:
          type: "integer"
          format: "int32"
      required:
      - "type"
    SearchQuery:
      type: "object"
      properties:
        query:
          type: "string"
        type:
          type: "string"
        rarity:
          type: "string"
        traits:
          type: "array"
          items:
            type: "string"
        numbers:
          type: "array"
          items:
            $ref: "#/components/schemas/NumericFilter"
    SearchResult:
      type: "object"
      properties:
        id:
          type: "string"
        img:
          type: "string"
        name:
          type: "string"
        type:
          type: "string"
        description:
          type: "string"